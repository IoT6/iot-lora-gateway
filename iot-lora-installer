#!/usr/bin/env python3

#IOT LoRa Installer
#By Ryan Walmsley
#This file downloads the current software for the LoRa Gateway Packet Forwarder By Kersing and installs it on your Raspberry Pi
#At the same time it also enables SPI, Installs a service to automatically start it on boot, a configuration script and
#Sets the core clock to a fixed frequency which fixes bugs on Models 3B & 3B+

#This Software is designed to be run on a Vanilla installation of Raspbian! We cannot gaurantee that it will not break Other
#Software you are running on your Raspberry Pi.

##Imports!
from time import sleep
import os, sys
##End imports

##START
print ('''

  ___ ___ _____   _        ___         ___      _
 |_ _/ _ \_   _| | |   ___| _ \__ _   / __|__ _| |_ _____ __ ____ _ _  _
  | | (_) || |   | |__/ _ \   / _` | | (_ / _` |  _/ -_) V  V / _` | || |
 |___\___/ |_|   |____\___/_|_\__,_|  \___\__,_|\__\___|\_/\_/\__,_|\_, |
                                                                    |__/

This script will install the software required to get your Pi Supply
IoT Lora Gateway HAT Up and running with The Things Network
The script will automatically continue in 10 seconds. If you are not happy press Control + C to quit.
''')
sleep(10)

##TODO
##We need to check which system this is running on

#Set variable model to
#Expected results:
#RPi : Raspberry
#Odroid C2: ODROID-C2
#Tinkerboard: Rockchip
#Unknown: 42

try:
    dtModel = open('/proc/device-tree/model','r')
except:
    print("Device Tree directory not found, this is likely because you are running this program on a normal computer or a non supported SBC")
    exit()
modelUsed = dtModel.read().split(" ")[0]
print ("Detected SBC: %s" %modelUsed)


print("Updating, Upgrading and installing packages from APT")
##Update Apt Repo List, Upgrade Any Other Packages and then install the required Packages
os.system("apt-get update && apt-get upgrade -y && apt-get install python3-dialog protobuf-compiler libprotobuf-dev libprotoc-dev automake libtool autoconf git pkg-config protobuf-c-compiler -y")

print("Deleting old files")
##Delete all of the old softwar,e this is fine as the configuration files are stored on the /boot partition
os.system("rm -rf /opt/iotloragateway")
##Remake the directory structure
os.system("mkdir -p /opt/iotloragateway")
os.system("mkdir -p /opt/iotloragateway/dev")

print("Downloading software to compile")
##Download all fo the software required
os.chdir("/opt/iotloragateway/dev")
os.system("git clone https://github.com/PiSupply/lora_gateway.git")
os.system("git clone https://github.com/PiSupply/paho.mqtt.embedded-c.git")
os.system("git clone https://github.com/PiSupply/ttn-gateway-connector.git")
os.system("git clone https://github.com/PiSupply/protobuf-c.git")
os.system("git clone https://github.com/PiSupply/packet_forwarder.git")
os.system("git clone https://github.com/PiSupply/iot-lora-gateway.git")

print("Compiling LoRa Gateway Driver")
##First lets compile the LoRa Gateway driver library which provides the SPI Interface
os.chdir("/opt/iotloragateway/dev/lora_gateway/libloragw")
##Change the configuration file based on what system is being used.
if(modelUsed == "Raspberry"):
    os.run("sed -i -e 's/PLATFORM= .*$/PLATFORM= iotloragw_rpi/g' library.cfg")
if(modelUsed == "Rockchip"):
    os.run("sed -i -e 's/PLATFORM= .*$/PLATFORM= iotloragw_tnk/g' library.cfg")
if(modelUsed == "ODRID-C2"):
    os.run("sed -i -e 's/PLATFORM= .*$/PLATFORM= iotloragw_odc2/g' library.cfg")

##Compile the gateway driver
os.system("make")

print("Compiling protobuf-c library")
##Move to the Protobuf-c library and compile it
os.chdir("/opt/iotloragateway/dev/protobuf-c")
os.system("./autogen.sh")
os.system("./configure")
os.system("make protobuf-c/libprotobuf-c.la")
os.system("mkdir bin")
##Install the library
os.system("./libtool install /usr/bin/install -c protobuf-c/libprotobuf-c.la `pwd`/bin")
os.system("rm -f `pwd`/bin/*so*")

print("Compiling MQTT library")
##Move to the MQTT Embedded library
os.chdir("/opt/iotloragateway/dev/paho.mqtt.embedded-c")
os.system("make")
os.system("make install")

print("Compiling TTN Connector library")
##Move to the TTN Connector library
os.chdir("/opt/iotloragateway/dev/ttn-gateway-connector")
os.system("cp config.mk.in config.mk")
os.system("make")
##Copy it to the /usr/lib directory for usage
os.system("cp /opt/iotloragateway/dev/ttn-gateway-connector/bin/libttn-gateway-connector.so /usr/lib")

#Move to the packet forwarder itself
os.chdir("/opt/iotloragateway/dev/packet_forwarder/mp_pkt_fwd")
##Compile it
os.system("make")
##And move this up one directory for the user to run
os.system("cp /opt/iotloragateway/dev/packet_forwarder/mp_pkt_fwd/mp_pkt_fwd /opt/iotloragateway/iot-lora-gateway")

#Move to the directory with all of our template configuration files
os.chdir("/opt/iotloragateway/dev/iot-lora-gateway")

#Create folders on the SD Card's boot, this will get ignored if it all exsists

#Copy all of the template files over

#Copy over the local config files

#And copy over the service files

#Cppy over the correct reset script into the /opt directory

##if raspberry Pi enable the SPI bus and set the core clock to 250mhz

##Reload systemctl daemon and enable the service

##Symlink the configuration python file so the user can run it from the terminal

print('''
  ___ ___ _____   _        ___         ___      _
 |_ _/ _ \_   _| | |   ___| _ \__ _   / __|__ _| |_ _____ __ ____ _ _  _
  | | (_) || |   | |__/ _ \   / _` | | (_ / _` |  _/ -_) V  V / _` | || |
 |___\___/ |_|   |____\___/_|_\__,_|  \___\__,_|\__\___|\_/\_/\__,_|\_, |
                                                                    |__/

Congratulations the gateway software is now fully installed!

You need to edit the configuration file for your gateway to be setup which is located
at /boot/iotloragateway/

You can either do this using a text editor or run "iot-lora-configure" for our
wizard based editor.

After upon rebooting your Raspberry Pi your gateway should be up and running.

''')

#File end
